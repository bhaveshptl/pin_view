def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('./app/key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}


def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

def channelId = localProperties.getProperty('flutter.channelId')
if (channelId == null) {
    channelId = '3'
}

def buildType = localProperties.getProperty('flutter.buildType')
if(buildType == null){
    buildType = 'stg'
}


task copyImages(type: Copy) {
    println 'Deleting images!!!!'
    delete "../../images"
    println 'Copying updated Images!!!!'
    if (channelId == '3') {
        copy {
            from "../../resources/images-fantasy"
            into "../../images"
        }
    } else if (channelId == '9') {
        copy {
            from "../../resources/images-smart11"
            into "../../images"
        }
    } else if (channelId == '10') {
        copy {
            from "../../resources/images-howzat"
            into "../../images"
        }
    }
}

task copyRes(type: Copy) {
    println 'Deleting resources!!!!'
    delete "../../android/app/src/main/res"
    println 'Copying updated resources!!!!'
    if (channelId == '3') {
        copy {
            from "../../resources/res-fantasy"
            into "../../android/app/src/main/res"
        }
    } else if (channelId == '9') {
        copy {
            from "../../resources/res-smart11"
            into "../../android/app/src/main/res"
        }
    } else if (channelId == '10') {
        copy {
            from "../../resources/res-howzat"
            into "../../android/app/src/main/res"
        }
    }
}

task copyFlutterInitialization(type: Copy) {
    println 'Deleting main.dart!!!!'
    delete "../../lib/main.dart"  
    println 'Copying updated resources!!!!'
    if (channelId == '3' && buildType == 'stg') {
        copy {
            from "../../resources/main_3.dart"
            into "../../lib"            
            rename { String fileName ->
                fileName.replace('_3', '')
            }
        }
    } else if (channelId == '9' && buildType == 'stg') {
        copy {
            from "../../resources/main_9.dart"
            into "../../lib"            
            rename { String fileName ->
                fileName.replace('_9', '')
            }
        }
    } else if (channelId == '10' && buildType == 'stg') {
        copy {
            from "../../resources/main_10.dart"
            into "../../lib"            
            rename { String fileName ->
                fileName.replace('_10', '')
            }
        }
    } else if (channelId == '3' && buildType == 'prod') {
        copy {
            from "../../resources/main_3_prod.dart"
            into "../../lib"            
            rename { String fileName ->
                fileName.replace('_3_prod', '')
            }
        }
    } else if (channelId == '9' && buildType == 'prod') {
        copy {
            from "../../resources/main_9_prod.dart"
            into "../../lib"            
            rename { String fileName ->
                fileName.replace('_9_prod', '')
            }
        }
    } else if (channelId == '10' && buildType == 'prod') {
        copy {
            from "../../resources/main_10_prod.dart"
            into "../../lib"            
            rename { String fileName ->
                fileName.replace('_10_prod', '')
            }
        }
    }
}

apply plugin: 'com.android.application'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

repositories {
    mavenCentral()
}

android {
    compileSdkVersion 27

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        applicationId "com.howzat.howzatfantasy"
        minSdkVersion 19
        targetSdkVersion 26
        multiDexEnabled true
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }
    buildTypes {
        release {
            signingConfig signingConfigs.release

            minifyEnabled true
            useProguard true

            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    testImplementation 'junit:junit:4.12'
    implementation 'com.facebook.android:facebook-android-sdk:[4,5)'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation 'io.branch.sdk.android:library:3.+'
    implementation 'com.razorpay:checkout:1.4.9'
    implementation 'com.google.firebase:firebase-messaging:17.4.0'
    implementation 'com.firebase:firebase-jobdispatcher:0.8.5'
}

apply plugin: 'com.google.gms.google-services'


